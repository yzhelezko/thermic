name: CI

on:
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install
          cd ..

      - name: Build frontend
        run: |
          cd frontend
          npm run build
          cd ..

      - name: Run tests
        run: go test -v ./...

      - name: Check Go formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Go code is not formatted properly:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

  build-test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libgtk-3-dev libwebkit2gtk-4.1-dev

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install
          cd ..

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Verify Wails installation
        run: wails doctor

      - name: Get version info
        id: version
        shell: bash
        run: |
          VERSION="dev-$(git rev-parse --short HEAD)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "git_commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "build_date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - name: Build application (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          wails build -clean -tags webkit2_41 \
            -ldflags "-X main.Version=${{ steps.version.outputs.version }} -X main.GitCommit=${{ steps.version.outputs.git_commit }} -X main.BuildDate=${{ steps.version.outputs.build_date }}"

      - name: Build application (Windows/macOS)
        if: matrix.os != 'ubuntu-latest'
        run: |
          wails build -clean \
            -ldflags "-X main.Version=${{ steps.version.outputs.version }} -X main.GitCommit=${{ steps.version.outputs.git_commit }} -X main.BuildDate=${{ steps.version.outputs.build_date }}"

      - name: Test build artifacts
        shell: bash
        run: |
          echo "=== Debug: Contents of build/ ==="
          ls -la build/ || echo "No build directory"
          echo "=== Debug: Contents of build/bin/ ==="
          ls -la build/bin/ || echo "No build/bin directory"
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ls -la build/bin/Thermic.exe
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            ls -la build/bin/Thermic
          else
            # macOS - check for .app bundle
            if [ -d "build/bin/Thermic.app" ]; then
              echo "Found Thermic.app bundle"
              ls -la build/bin/Thermic.app
              ls -la build/bin/Thermic.app/Contents/MacOS/Thermic
            elif [ -f "build/bin/thermic" ]; then
              echo "Found regular thermic binary"
              ls -la build/bin/thermic
            else
              echo "ERROR: No expected binary found on macOS"
              echo "Contents of build/bin/:"
              ls -la build/bin/
              exit 1
            fi
          fi