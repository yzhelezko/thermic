name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        platform:
          - os: windows-latest
            target: windows/amd64
            name: thermic-windows-amd64.exe
          - os: ubuntu-latest
            target: linux/amd64
            name: thermic-linux-amd64
          - os: macos-latest
            target: darwin/amd64
            name: thermic-darwin-amd64
          - os: macos-latest
            target: darwin/arm64
            name: thermic-darwin-arm64

    runs-on: ${{ matrix.platform.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies (Ubuntu)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libgtk-3-dev libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev

      - name: Install dependencies (macOS)
        if: matrix.platform.os == 'macos-latest'
        run: |
          # No additional dependencies needed for macOS

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install
          cd ..

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Verify Wails installation
        run: wails doctor

      - name: Build application
        run: wails build -platform ${{ matrix.platform.target }} -clean

      - name: Debug build output
        run: |
          echo "Build directory contents:"
          ls -la build/
          echo "Build bin directory contents:"
          ls -la build/bin/ || echo "No build/bin directory"

      - name: Prepare artifacts (Windows)
        if: matrix.platform.os == 'windows-latest'
        shell: bash
        run: |
          mkdir -p artifacts
          # Find the executable file
          if [ -f "build/bin/thermic.exe" ]; then
            cp build/bin/thermic.exe artifacts/${{ matrix.platform.name }}
          elif [ -f "build/bin/Thermic Terminal.exe" ]; then
            cp "build/bin/Thermic Terminal.exe" artifacts/${{ matrix.platform.name }}
          else
            echo "Windows executable not found"
            ls -la build/bin/
            exit 1
          fi

      - name: Prepare artifacts (Linux)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          mkdir -p artifacts
          # Find the executable file
          if [ -f "build/bin/thermic" ]; then
            cp build/bin/thermic artifacts/${{ matrix.platform.name }}
          elif [ -f "build/bin/Thermic Terminal" ]; then
            cp "build/bin/Thermic Terminal" artifacts/${{ matrix.platform.name }}
          else
            echo "Linux executable not found"
            ls -la build/bin/
            exit 1
          fi

      - name: Prepare artifacts (macOS)
        if: matrix.platform.os == 'macos-latest'
        run: |
          mkdir -p artifacts
          # On macOS, Wails creates a .app bundle
          if [ -d "build/bin/thermic.app" ]; then
            # Extract the executable from the .app bundle
            cp "build/bin/thermic.app/Contents/MacOS/thermic" artifacts/${{ matrix.platform.name }}
          elif [ -d "build/bin/Thermic Terminal.app" ]; then
            cp "build/bin/Thermic Terminal.app/Contents/MacOS/Thermic Terminal" artifacts/${{ matrix.platform.name }}
          elif [ -f "build/bin/thermic" ]; then
            # Fallback for non-app builds
            cp build/bin/thermic artifacts/${{ matrix.platform.name }}
          else
            echo "macOS executable not found"
            echo "Contents of build/bin/:"
            ls -la build/bin/
            if [ -d "build/bin/thermic.app" ]; then
              echo "Contents of thermic.app/Contents/MacOS/:"
              ls -la "build/bin/thermic.app/Contents/MacOS/" || true
            fi
            exit 1
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.name }}
          path: artifacts/${{ matrix.platform.name }}

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Thermic Terminal ${{ github.ref_name }}
          body: |
            ## Thermic Terminal ${{ github.ref_name }}
            
            Cross-platform terminal emulator with WSL support.
            
            ### Downloads
            - **Windows**: thermic-windows-amd64.exe
            - **Linux**: thermic-linux-amd64  
            - **macOS Intel**: thermic-darwin-amd64
            - **macOS Apple Silicon**: thermic-darwin-arm64
            
            ### Features
            - üñ•Ô∏è Cross-platform terminal emulator
            - üêß WSL support on Windows
            - üé® VS Code-like terminal experience
            - ‚ö° Built with Wails and xterm.js
            
            ### Installation
            1. Download the appropriate binary for your platform
            2. Make it executable (Linux/macOS): `chmod +x thermic-*`
            3. Run the application
          draft: false
          prerelease: false

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/thermic-windows-amd64.exe/thermic-windows-amd64.exe
          asset_name: thermic-windows-amd64.exe
          asset_content_type: application/octet-stream

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/thermic-linux-amd64/thermic-linux-amd64
          asset_name: thermic-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload macOS Intel Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/thermic-darwin-amd64/thermic-darwin-amd64
          asset_name: thermic-darwin-amd64
          asset_content_type: application/octet-stream

      - name: Upload macOS ARM Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/thermic-darwin-arm64/thermic-darwin-arm64
          asset_name: thermic-darwin-arm64
          asset_content_type: application/octet-stream 