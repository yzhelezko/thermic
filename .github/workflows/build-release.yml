name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

# Add permissions for GitHub Actions
permissions:
  contents: write  # Required for creating releases and uploading assets
  actions: read    # Required for downloading artifacts

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        platform:
          - os: windows-latest
            target: windows/amd64
            name: thermic-windows-amd64.exe
          - os: ubuntu-latest
            target: linux/amd64
            name: thermic-linux-amd64
          - os: macos-latest
            target: darwin/amd64
            name: thermic-darwin-amd64
          - os: macos-latest
            target: darwin/arm64
            name: thermic-darwin-arm64

    runs-on: ${{ matrix.platform.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies (Ubuntu)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libgtk-3-dev libwebkit2gtk-4.1-dev

      - name: Install dependencies (macOS)
        if: matrix.platform.os == 'macos-latest'
        run: |
          # No additional dependencies needed for macOS

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install
          cd ..

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Verify Wails installation
        run: wails doctor

      - name: Get version info
        id: version
        shell: bash
        run: |
          # Get version from git tag or set default
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="dev-$(git rev-parse --short HEAD)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "git_commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "build_date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - name: Build application (Linux)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          wails build -platform ${{ matrix.platform.target }} -clean -tags webkit2_41 \
            -ldflags "-X main.Version=${{ steps.version.outputs.version }} -X main.GitCommit=${{ steps.version.outputs.git_commit }} -X main.BuildDate=${{ steps.version.outputs.build_date }}"

      - name: Build application (Windows)
        if: matrix.platform.os == 'windows-latest'
        run: |
          wails build -platform ${{ matrix.platform.target }} -clean -ldflags "-X main.Version=${{ steps.version.outputs.version }} -X main.GitCommit=${{ steps.version.outputs.git_commit }} -X main.BuildDate=${{ steps.version.outputs.build_date }}"

      - name: Build application (macOS)
        if: matrix.platform.os == 'macos-latest'
        run: |
          wails build -platform ${{ matrix.platform.target }} -clean \
            -ldflags "-X main.Version=${{ steps.version.outputs.version }} -X main.GitCommit=${{ steps.version.outputs.git_commit }} -X main.BuildDate=${{ steps.version.outputs.build_date }}"

      - name: Debug build output
        shell: bash
        run: |
          echo "Build directory contents:"
          ls -la build/
          echo "Build bin directory contents:"
          ls -la build/bin/ || echo "No build/bin directory"

      - name: Prepare artifacts (Windows)
        if: matrix.platform.os == 'windows-latest'
        shell: bash
        run: |
          mkdir -p artifacts
          # Find the executable file
          if [ -f "build/bin/thermic.exe" ]; then
            cp build/bin/thermic.exe artifacts/${{ matrix.platform.name }}
          elif [ -f "build/bin/Thermic.exe" ]; then
            cp "build/bin/Thermic.exe" artifacts/${{ matrix.platform.name }}
          else
            echo "Windows executable not found"
            ls -la build/bin/
            exit 1
          fi

      - name: Prepare artifacts (Linux)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          mkdir -p artifacts
          # Find the executable file
          if [ -f "build/bin/thermic" ]; then
            cp build/bin/thermic artifacts/${{ matrix.platform.name }}
          elif [ -f "build/bin/Thermic" ]; then
            cp "build/bin/Thermic" artifacts/${{ matrix.platform.name }}
          else
            echo "Linux executable not found"
            ls -la build/bin/
            exit 1
          fi

      - name: Prepare artifacts (macOS)
        if: matrix.platform.os == 'macos-latest'
        run: |
          mkdir -p artifacts
          # On macOS, Wails creates a .app bundle
          if [ -d "build/bin/thermic.app" ]; then
            # Extract the executable from the .app bundle
            cp "build/bin/thermic.app/Contents/MacOS/thermic" artifacts/${{ matrix.platform.name }}
          elif [ -d "build/bin/Thermic.app" ]; then
            cp "build/bin/Thermic.app/Contents/MacOS/Thermic" artifacts/${{ matrix.platform.name }}
          elif [ -f "build/bin/thermic" ]; then
            # Fallback for non-app builds
            cp build/bin/thermic artifacts/${{ matrix.platform.name }}
          else
            echo "macOS executable not found"
            echo "Contents of build/bin/:"
            ls -la build/bin/
            if [ -d "build/bin/thermic.app" ]; then
              echo "Contents of thermic.app/Contents/MacOS/:"
              ls -la "build/bin/thermic.app/Contents/MacOS/" || true
            fi
            exit 1
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.name }}
          path: artifacts/${{ matrix.platform.name }}

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper tag comparison

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Generate dynamic release notes
        id: release_notes
        run: |
          # Configure git to prevent hanging
          git config --global core.pager cat
          export GIT_PAGER=cat
          
          # Get the previous tag
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+" | head -2 | tail -1)
          CURRENT_TAG="${{ github.ref_name }}"
          
          echo "Current tag: $CURRENT_TAG"
          echo "Previous tag: $PREVIOUS_TAG"
          
          # Generate categorized commit log since last tag
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_TAG"
            
            # Get all commits with full body text
            ALL_COMMITS=$(git log --pretty=format:"%s|%b|%h|%an" $PREVIOUS_TAG..$CURRENT_TAG --no-merges)
            COMMIT_COUNT=$(git rev-list --count $PREVIOUS_TAG..$CURRENT_TAG --no-merges)
            
          else
            echo "No previous tag found, showing recent commits"
            ALL_COMMITS=$(git log --pretty=format:"%s|%b|%h|%an" --max-count=10 --no-merges)
            COMMIT_COUNT=$(git rev-list --count HEAD --max-count=10 --no-merges)
          fi
          
          # Extract and categorize bullet points from commits
          FEATURES=""
          FIXES=""
          IMPROVEMENTS=""
          OTHER=""
          
          # Process each commit
          while IFS='|' read -r subject body hash author; do
            # First, categorize the main commit message
            commit_category=""
            if [[ $subject =~ ^[Ff]eat.*|^[Aa]dd.*|^[Nn]ew.* ]]; then
              commit_category="FEATURES"
            elif [[ $subject =~ ^[Ff]ix.*|^[Bb]ug.*|^[Rr]epair.* ]]; then
              commit_category="FIXES"
            elif [[ $subject =~ ^[Ii]mprove.*|^[Ee]nhance.*|^[Oo]ptimize.*|^[Uu]pdate.*|^[Rr]efactor.* ]]; then
              commit_category="IMPROVEMENTS"
            else
              commit_category="OTHER"
            fi
            
                         # Extract bullet points from commit body (clean up whitespace and encoding)
             bullet_points=$(echo "$body" | grep -E "^\s*[-•]\s+" | sed 's/^\s*[-•]\s*//' | sed 's/[[:space:]]*$//' | tr -d '\r')
             
             if [ -n "$bullet_points" ]; then
               # Add bullet points with commit reference
               while IFS= read -r bullet; do
                 if [ -n "$bullet" ] && [ "$bullet" != "-" ]; then
                   # Clean the bullet point text
                   clean_bullet="- $(echo "$bullet" | sed 's/[[:space:]]*$//' | tr -d '\r')"
                   
                   # Categorize bullet points based on keywords
                   if [[ $clean_bullet =~ [Ff]eat|[Aa]dd|[Nn]ew|[Ii]mplement ]]; then
                     FEATURES="${FEATURES}${clean_bullet}\n"
                   elif [[ $clean_bullet =~ [Ff]ix|[Bb]ug|[Rr]epair|[Cc]orrect ]]; then
                     FIXES="${FIXES}${clean_bullet}\n"
                   elif [[ $clean_bullet =~ [Ii]mprove|[Ee]nhance|[Oo]ptimize|[Uu]pdate|[Rr]efactor ]]; then
                     IMPROVEMENTS="${IMPROVEMENTS}${clean_bullet}\n"
                   else
                     # Use the commit's category for uncategorized bullet points
                     case $commit_category in
                       "FEATURES") FEATURES="${FEATURES}${clean_bullet}\n" ;;
                       "FIXES") FIXES="${FIXES}${clean_bullet}\n" ;;
                       "IMPROVEMENTS") IMPROVEMENTS="${IMPROVEMENTS}${clean_bullet}\n" ;;
                       *) OTHER="${OTHER}${clean_bullet}\n" ;;
                     esac
                   fi
                 fi
               done <<< "$bullet_points"
             else
               # No bullet points, add the main subject
               case $commit_category in
                 "FEATURES") FEATURES="${FEATURES}- ${subject}\n" ;;
                 "FIXES") FIXES="${FIXES}- ${subject}\n" ;;
                 "IMPROVEMENTS") IMPROVEMENTS="${IMPROVEMENTS}- ${subject}\n" ;;
                 *) OTHER="${OTHER}- ${subject}\n" ;;
               esac
             fi
          done <<< "$ALL_COMMITS"
          
          # Get build info
          BUILD_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          GIT_COMMIT=$(git rev-parse --short HEAD)
          
          # Get contributors since last tag
          if [ -n "$PREVIOUS_TAG" ]; then
            CONTRIBUTORS=$(git log --pretty=format:"%an" $PREVIOUS_TAG..$CURRENT_TAG --no-merges | sort -u | sed 's/^/- /')
          else
            CONTRIBUTORS=$(git log --pretty=format:"%an" --max-count=10 --no-merges | sort -u | sed 's/^/- /')
          fi
          
          # Create release notes
          cat << EOF > release_notes.md
          ## Thermic $CURRENT_TAG
          
          Cross-platform terminal emulator with advanced SSH connection management and WSL support.
          
          ### 🎯 What's New in This Release
          
          EOF
          
          if [ "$COMMIT_COUNT" -gt 0 ]; then
            echo "**$COMMIT_COUNT commits** since ${PREVIOUS_TAG:-"initial development"}:" >> release_notes.md
            echo "" >> release_notes.md
            
            # Add categorized sections
            if [ -n "$FEATURES" ]; then
              echo "#### 🆕 New Features" >> release_notes.md
              echo -e "$FEATURES" >> release_notes.md
            fi
            
            if [ -n "$IMPROVEMENTS" ]; then
              echo "#### 🔧 Improvements & Updates" >> release_notes.md
              echo -e "$IMPROVEMENTS" >> release_notes.md
            fi
            
            if [ -n "$FIXES" ]; then
              echo "#### 🐛 Bug Fixes" >> release_notes.md
              echo -e "$FIXES" >> release_notes.md
            fi
            
            if [ -n "$OTHER" ]; then
              echo "#### 📝 Other Changes" >> release_notes.md
              echo -e "$OTHER" >> release_notes.md
            fi
          else
            echo "Initial release with core terminal emulator functionality." >> release_notes.md
          fi
          
          cat << EOF >> release_notes.md
          
          ### 📦 Downloads
          - **Windows**: thermic-windows-amd64.exe
          - **Linux**: thermic-linux-amd64  
          - **macOS Intel**: thermic-darwin-amd64
          - **macOS Apple Silicon**: thermic-darwin-arm64
          
          ### 🌟 Key Features
          - 🖥️ Cross-platform terminal emulator
          - 🔒 Advanced SSH connection management with auto-reconnect
          - 🐧 WSL support on Windows
          - 🎨 VS Code-like terminal experience with tabs
          - ⚡ Built with Wails and xterm.js
          - 🔄 Auto-update functionality
          - 📊 Real-time system monitoring in status bar
          - 🎯 Smart connection hanging detection
          - 🔧 Context-aware right-click menus
          
          ### 🚀 Installation
          1. Download the appropriate binary for your platform
          2. Make it executable (Linux/macOS): \`chmod +x thermic-*\`
          3. Run the application
          
          ### 🔄 Auto-Update
          The application automatically checks for updates and notifies you through the status bar.
          EOF
          
          # Add contributors section if there are any
          if [ -n "$CONTRIBUTORS" ]; then
            echo "" >> release_notes.md
            echo "### 👥 Contributors" >> release_notes.md
            echo "Thanks to everyone who contributed to this release:" >> release_notes.md
            echo "" >> release_notes.md
            echo "$CONTRIBUTORS" >> release_notes.md
          fi
          
          cat << EOF >> release_notes.md
          
          ### 📋 Build Information
          - **Build Date**: $BUILD_DATE
          - **Git Commit**: $GIT_COMMIT
          - **Platforms**: Windows (amd64), Linux (amd64), macOS (Intel + Apple Silicon)
          EOF
          
          # Debug output
          echo "=== Debug Information ==="
          echo "Current tag: $CURRENT_TAG"
          echo "Previous tag: $PREVIOUS_TAG"
          echo "Commit count: $COMMIT_COUNT"
          echo "Features found: $([ -n "$FEATURES" ] && echo "YES" || echo "NO")"
          echo "Fixes found: $([ -n "$FIXES" ] && echo "YES" || echo "NO")"
          echo "Improvements found: $([ -n "$IMPROVEMENTS" ] && echo "YES" || echo "NO")"
          echo "Other changes found: $([ -n "$OTHER" ] && echo "YES" || echo "NO")"
          echo "Contributors found: $([ -n "$CONTRIBUTORS" ] && echo "YES" || echo "NO")"
          echo "=========================="
          
          # Output for GitHub Actions
          echo "Generated release notes:"
          cat release_notes.md
          echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: Create Release with Assets
        uses: softprops/action-gh-release@v1
        with:
          name: Thermic ${{ github.ref_name }}
          body_path: ${{ steps.release_notes.outputs.release_notes_file }}
          files: |
            artifacts/thermic-windows-amd64.exe/thermic-windows-amd64.exe
            artifacts/thermic-linux-amd64/thermic-linux-amd64
            artifacts/thermic-darwin-amd64/thermic-darwin-amd64
            artifacts/thermic-darwin-arm64/thermic-darwin-arm64
          draft: false
          prerelease: false